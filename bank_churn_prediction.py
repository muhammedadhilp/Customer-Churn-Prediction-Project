# -*- coding: utf-8 -*-
"""bank_churn_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wNsQpOebWXGkP4KvX9VqsnXih47m1Fjb
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/Churn_Modelling.csv')
df.head()

df.describe()
# 1.RowNumber: The row number of each record.
# Mean: 5000.5 (since there are 10,000 records, the midpoint is around 5000.5).
# Min/Max: Ranges from 1 to 10,000, representing the index of each customer.

# 2.CustomerId: A unique identifier for each customer.
# Mean: 15,690,940, with a standard deviation of 71,936, indicating variability in customer IDs.
# Range: 15,565,700 to 15,815,690, showing the unique IDs span over a relatively small range.

# 3.CreditScore: The customer’s credit score.
# Mean: 650.53, with a standard deviation of 96.65, suggesting a broad distribution of credit scores.
# Range: 350 to 850, with 350 being very low and 850 the maximum possible, indicating a wide variety of customers with different creditworthiness levels.

# 4.Age: The age of the customer.
# Mean: 38.92 years, with a standard deviation of 10.49 years.
# Range: 18 to 92 years, covering both young adults and elderly customers.

# 5.Tenure: The number of years the customer has been with the bank.
# Mean: 5.01 years, with a standard deviation of 2.89 years.
# Range: 0 to 10 years, where some customers may be new (tenure 0) and others have been with the bank for a decade.

# 6.Balance: The balance in the customer’s bank account.
# Mean: $76,485.89, with a standard deviation of $62,397.40, indicating wide variability in balances.
# Range: $0 (some customers may not keep balances) to $250,898, with a median around $97,198, showing many customers have significant deposits.

# 7.NumOfProducts: The number of products the customer has with the bank (e.g., savings account, credit card, loan).
# Mean: 1.53 products, with a standard deviation of 0.58.
# Range: 1 to 4 products, with 75% of customers having at least 1 or 2 products.

# 8.HasCrCard: Whether the customer has a credit card (1 = Yes, 0 = No).
# Mean: 0.7055, meaning around 70.55% of customers have a credit card, while the rest do not.

# 9.IsActiveMember: Whether the customer is an active member of the bank (1 = Yes, 0 = No).
# Mean: 0.5151, showing that roughly half (51.51%) of the customers are active members.

# 10.EstimatedSalary: The customer’s estimated annual salary.
# Mean: $100,090.24, with a standard deviation of $57,510.49.
# Range: $11.58 to $199,992.48, indicating a broad range of income levels across the customers, from very low to nearly $200,000.

# 11.Exited: Whether the customer has left the bank (1 = Yes, 0 = No).
# Mean: 0.2037, indicating that around 20.37% of the customers have exited the bank (churned), while the majority (nearly 80%) are still with the bank.

# **Key Insights:
# Customer Demographics: Most customers are middle-aged (mean age ~39) with a broad range of ages from young adults (18) to elderly (92).
# Tenure: Most customers have been with the bank for about 5 years, though some are brand new (0 years) and others have stayed for up to 10 years.
# Credit Scores: The average credit score is 650, which is moderate, but there is a wide range (350 to 850) indicating customers with both poor and excellent credit histories.
# Account Balances: Balances vary widely, with some customers having no money in their accounts, while others have up to $250,000. The average balance is around $76,000, but this is skewed with high variability.
# Bank Products: Most customers have between 1 and 2 products with the bank.
# Active Membership: About half of the customers are considered "active," indicating engagement with the bank.
# Churn: Approximately 20% of customers have left the bank, which may suggest the bank should analyze why customers are leaving to improve retention.

df.info()
# There are categorical values in the dataset which is going to need encoding
# RowNumber,CustomerId,Surname are irrelavent so dropping them.
df = df.drop(['RowNumber','CustomerId','Surname'],axis = 1)
df.head()

df.isna().sum()

# Visualisations
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use='ggplot'

# Create a 2x2 grid of subplots
fig, ax = plt.subplots(2, 2, figsize=(18, 6))

# Plot the countplots on the subplots
sns.countplot(data=df, x='Geography', hue='Exited', ax=ax[0, 0])
sns.countplot(data=df, x='NumOfProducts', hue='Exited', ax=ax[0, 1])
sns.countplot(data=df, x='HasCrCard', hue='Exited', ax=ax[1, 0])
sns.countplot(data=df, x='IsActiveMember', hue='Exited', ax=ax[1, 1])

# Adjust the layout
plt.tight_layout()
plt.show()
# From the visualizations, it's evident that:

# 1.In France, there is a significantly smaller proportion of people leaving the bank compared to Germany and Spain. While the number of people staying is relatively similar in Germany and Spain, the number of people leaving is higher in Germany than in Spain.
# 2.Customers with up to two products are more likely to stay, with the majority having either 1 or 2 products. However, customers with only 1 product are more likely to leave compared to those with 2 products. The number of customers with 3 or 4 products is very low, and among them, the churn rate is high.

# 3.Customers who hold credit cards are more likely to remain with the bank.

# 4.Customers tend to stay whether they are active members or not, but active members are less likely to leave compared to inactive ones.

# Create a 2x2 grid of subplots
fig, ax = plt.subplots(2, 2, figsize=(18, 12))

# Plot the countplots on the subplots
sns.swarmplot(data=df, x='Geography', hue='Exited', ax=ax[0, 0])
sns.swarmplot(data=df, x='NumOfProducts', hue='Exited', ax=ax[0, 1])
sns.swarmplot(data=df, x='HasCrCard', hue='Exited', ax=ax[1, 0])
sns.swarmplot(data=df, x='IsActiveMember', hue='Exited', ax=ax[1, 1])

# Adjust the layout
plt.tight_layout()
plt.show()

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
df["Geography"] = encoder.fit_transform(df["Geography"])
df["Gender"] = encoder.fit_transform(df["Gender"])

df["Age"].value_counts().plot.bar(figsize=(20,6))

# Create a 1x2 grid of subplots
fig, ax = plt.subplots(1, 2, figsize=(15, 7))
# Plot the countplots on the subplots
sns.scatterplot(data=df,x = "Age", y = "Balance", hue = "Exited", sizes = (10, 200), ax=ax[0])
sns.scatterplot(data=df,x = "Age", y = "CreditScore", hue = "Exited", sizes = (10, 200), ax=ax[1])

# Adjust the layout
plt.tight_layout()
plt.show()
# 40 to 70 years old customers are higher chances to churn
# Customer with CreditScore less then 400 are higher chances to churn

plt.figure(figsize=(8, 8))
sns.swarmplot(x = "HasCrCard", y = "Age", data = df, hue="Exited")
# The data distribution shows a significant increase in customer exits after the age of 40, regardless of whether they have a credit card.

facet = sns.FacetGrid(df, hue="Exited",aspect=3)
facet.map(sns.kdeplot,"Balance",shade= True)
facet.set(xlim=(0, df["Balance"].max()))
facet.add_legend()

plt.show()
# Starting from a balance of 50,000, the exit rate increases, with a peak between 100,000 and 150,000

fig, ax = plt.subplots(1, 2, figsize=(15, 6))
sns.scatterplot(x = "Balance", y = "Age", data = df, hue="Exited", ax = ax[0])
sns.scatterplot(x = "Balance", y = "CreditScore", data = df, hue="Exited", ax = ax[1])

facet = sns.FacetGrid(df, hue="Exited",aspect=3)
facet.map(sns.kdeplot,"CreditScore",shade= True)
facet.set(xlim=(0, df["CreditScore"].max()))
facet.add_legend()

plt.show()
# Regarding credit scores, there are no major patterns,
# though there is a peak in customers not exiting around scores of 600 and 800. Additionally, there's a slight rise in customer exits for those with credit scores between 500 and 600, as well as between 300 and 450.

# Checking for outliers
plt.figure(figsize=(12,6))
bplot = df.boxplot(patch_artist=True)
plt.xticks(rotation=90)
plt.show()

# Checking for outliers with z-score
from scipy import stats

# Calculate z-scores
z_scores = np.abs(stats.zscore(df))
outliers = (z_scores > 3)
outliers.sum()
# Interpretation:
# 1.Age (133 outliers): This indicates that there are many extreme values in the Age column, possibly due to older or younger individuals that stand out compared to the average age range of the dataset.
# 2.CreditScore (8 outliers): There are a few extreme values in customer credit scores, which may be very high or low compared to the rest of the population.
# 3.NumOfProducts (60 outliers): A substantial number of customers have an unusually high or low number of products compared to the rest of the population.
# 4.Other columns (no outliers): There are no significant outliers detected in the other columns (Geography, Gender, etc.).

# Checking for correlation.
plt.subplots(figsize=(11,8))
sns.heatmap(df.corr(), annot=True, cmap="RdYlBu")
plt.show()

X = df.drop("Exited", axis=1)
y = df["Exited"]

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# model training
from sklearn import tree
from sklearn.tree import plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Initialize and train the Logistic Regression model
model = tree.DecisionTreeClassifier()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Print the classification report for precision, recall, f1-score
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()
# Accuracy: 79.75%

